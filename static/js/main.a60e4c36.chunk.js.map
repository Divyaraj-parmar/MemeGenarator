{"version":3,"sources":["Components/HeaderComponent.jsx","App.js","index.js"],"names":["headerCSS","display","justifyContent","backgroundColor","HeaderComponent","style","App","useState","memeTemplates","setTemplates","inputCount","setInputCount","template","setTemplate","url","setUrl","text","setText","username","password","boxes","data","setData","useEffect","fetch","then","x","json","response","memes","Array","fill","className","onChange","e","map","name","target","value","box_count","selected","disabled","textAlign","id","width","margin","src","alt","t","index","placeholder","newBox","template_id","onClick","URL","b","indx","res","generateMeme","rootElement","document","getElementById","ReactDOM","render"],"mappings":"2MACMA,EAAW,CACfC,QAAQ,OACRC,eAAe,SACfC,gBAAgB,aAUHC,MARf,WACE,OACI,wBAAQC,MAAOL,EAAf,SACI,mDCuHKM,MA1Hf,WAEE,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAsBN,mBAAS,IAA/B,mBAAOO,EAAP,KAAYC,EAAZ,KACA,EAAwBR,mBAAS,IAAjC,mBAAOS,EAAP,KAAaC,EAAb,KAEA,EAAwBV,mBAAS,CAE/BW,SAAU,oBACVC,SAAU,gBACVC,MAAO,KAJT,mBAAOC,EAAP,KAAaC,EAAb,KAoEA,OA3DAC,qBAAU,WACRC,MAAM,sCAAsCC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAAOF,MAAK,SAAAG,GAAQ,OAAInB,EAAamB,EAASP,KAAKQ,eAC1G,IAEHN,qBAAU,WACRN,EAAQa,MAAMpB,GAAYqB,KAAK,OAC9B,CAACrB,IAsDF,sBAAKsB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,mCACE,iDACA,yBAAQ3B,MAAO,CAAEJ,QAAS,SAAWgC,SAlD3C,SAAuBC,GAErB1B,EAAc2B,KAAI,SAAAd,GAMhB,OALIA,EAAKe,OAASF,EAAEG,OAAOC,QACzBvB,EAAOM,EAAKP,KACZH,EAAcU,EAAKkB,WACnB1B,EAAYQ,IAEP,MA0CL,UACE,wBAAQmB,UAAQ,EAACC,UAAQ,EAACpC,MAAO,CAAEqC,UAAW,UAA9C,kCACClC,EAAc2B,KAAI,SAAAvB,GACjB,OAAO,iCAA4BA,EAASwB,MAAxBxB,EAAS+B,UAIjC,qBAAKtC,MAAO,CAAEuC,MAAO,QAASC,OAAQ,QAAUC,IAAKhC,EAAKiC,IAAKnC,EAASwB,OAEvEpB,EAAKmB,KAAI,SAACa,EAAGC,GAAJ,OACR,uBAEEC,YAAW,eAAUD,EAAQ,GAC7BhB,SAAU,SAACC,GAET,IAAMiB,EAAS9B,EAAKD,MACpB+B,EAAOF,GAAS,CAAEjC,KAAMkB,EAAEG,OAAOC,OACjChB,EAAQ,2BAAKD,GAAN,IAAW+B,YAAaxC,EAAS+B,GAAIvB,MAAO+B,OANhDF,MAcT,wBACEI,QAAS,YA/CI,WAEnB,IAAIC,EAAG,4DAAwDjC,EAAK+B,YAA7D,qBAAqF/B,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMe,KAAI,SAACoB,EAAGC,GACjBF,GAAG,iBAAcE,EAAd,mBAA6BD,EAAEvC,SAGpCQ,MAAM8B,GAAK7B,MAAK,SAAAG,GAAQ,OAAIA,EAASD,UAAQF,MAAK,SAAAgC,GAEhD1C,EAAO0C,EAAIpC,KAAKP,QAuCV4C,IAFJ,gCC3GFC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,K","file":"static/js/main.a60e4c36.chunk.js","sourcesContent":["import React from 'react';\r\nconst headerCSS ={\r\n  display:'flex',\r\n  justifyContent:'center',\r\n  backgroundColor:'royalblue'\r\n}\r\nfunction HeaderComponent() {\r\n  return (\r\n      <header style={headerCSS}>\r\n          <h1 >Meme Generator</h1>\r\n      </header>\r\n  );\r\n}\r\n\r\nexport default HeaderComponent;\r\n","import './App.css';\nimport { useEffect, useState } from 'react';\nimport HeaderComponent from './Components/HeaderComponent';\nimport React from 'react';\n\n\nfunction App() {\n\n  const [memeTemplates, setTemplates] = useState([]); // Array of Memes\n  const [inputCount, setInputCount] = useState(0);\n  const [template, setTemplate] = useState([]);\n  const [url, setUrl] = useState('');\n  const [text, setText] = useState([]); // number of inputs\n  // const [generatedMemeUrl , setGeneratedMemeUrl] = useState('');\n  const [data, setData] = useState({\n  \n    username: 'memeBanataHaiApun',\n    password: 'memeMaker1234',\n    boxes: []\n  })\n\n\n\n  useEffect(() => {\n    fetch(' https://api.imgflip.com/get_memes').then(x => x.json().then(response => setTemplates(response.data.memes)));\n  }, []);\n\n  useEffect(() => {\n    setText(Array(inputCount).fill(''));\n  }, [inputCount]);\n\n  // useEffect(()=>{\n  //   console.log(text);\n  // },[text]);\n\n\n\n  function optionHandler(e) {\n\n    memeTemplates.map(data => {\n      if (data.name === e.target.value) {\n        setUrl(data.url);\n        setInputCount(data.box_count);\n        setTemplate(data);\n      }\n      return 1;\n    })\n\n  }\n\n  // const insertTextToTemplate = (e, index) => {\n\n  //   const insertedText = e.target.value || '';\n  //   setText(\n  //     text.map((c, idx) => {\n  //       if (index === idx) {\n  //         return insertedText;\n  //       }\n  //       else {\n  //         return c;\n  //       }\n  //     })\n  //   );\n\n  // }\n\n  const generateMeme = () => {\n    // console.log(data.boxes);\n    let URL = `https://api.imgflip.com/caption_image?template_id=${data.template_id}&username=${data.username}&password=${data.password}`;\n    data.boxes.map((b, indx) => {\n      URL += `&boxes[${indx}][text]=${b.text}`;\n    });\n    \n    fetch(URL).then(response => response.json()).then(res =>{\n      // setGeneratedMemeUrl(res.data.url);\n      setUrl(res.data.url);\n    })\n    \n    // console.log(URL);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <HeaderComponent />\n      <center >\n        <h1>Choose Template</h1>\n        <select style={{ display: 'block' }} onChange={optionHandler}>\n          <option selected disabled style={{ textAlign: 'center' }}>Select Meme Template</option>\n          {memeTemplates.map(template => {\n            return <option key={template.id} >{template.name}</option>\n          })}\n        </select>\n\n        <img style={{ width: '275px', margin: '15px' }} src={url} alt={template.name}/>\n\n        {text.map((t, index) => (\n          <input\n            key={index}\n            placeholder={`text ${index + 1}`}\n            onChange={(e) => {\n              // insertTextToTemplate(e, index)\n              const newBox = data.boxes;\n              newBox[index] = { text: e.target.value };\n              setData({ ...data,template_id: template.id, boxes: newBox });\n              // console.log(template.id);\n              \n              \n            }}\n\n          />\n        ))}\n        <button\n          onClick={() => {\n            generateMeme()\n            // console.log(data)\n            // console.log(template)\n          }}\n        >Create Meme</button>\n\n        {/* <h1>Your Meme</h1> */}\n        {/* <img style={{ width: '275px', margin: '15px' }} src={generatedMemeUrl} /> */}\n\n      </center>\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}